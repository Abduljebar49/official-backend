generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                String              @id @default(uuid())
  firstName         String
  lastName          String
  email             String              @unique
  passwordHash      String
  assignedLocations InventoryLocation[] @relation("AssignedAdmin")
  adminOwners       AdminOwner[]
  adminRoles        AdminRole[]
}

model Owner {
  id                 String              @id @default(uuid())
  firstName          String
  lastName           String
  email              String              @unique
  passwordHash       String
  inventoryLocations InventoryLocation[]
  adminOwners        AdminOwner[]
}

model InventoryLocation {
  id               String            @id @default(uuid())
  ownerId          String
  locationName     String
  address          String
  phoneNumber      String
  warehouseType    String?
  capacity         Int?
  assignedAdminId  String?
  owner            Owner             @relation(fields: [ownerId], references: [id])
  assignedAdmin    Admin?            @relation("AssignedAdmin", fields: [assignedAdminId], references: [id])
  products         Product[]
  productMovements ProductMovement[] @relation("SourceLocation")
  receivedProducts ProductMovement[] @relation("DestinationLocation")
  productReturns   ProductReturn[]   @relation("ProductReturnLocation")
}

model Product {
  id                String            @id @default(uuid())
  productName       String
  sku               String            @unique
  barcode           String?
  description       String?
  price             Float
  costPrice         Float
  quantityInStock   Int
  batchNumber       String?
  serialNumber      String?
  category          String
  expirationDate    DateTime?
  locationId        String
  inventoryLocation InventoryLocation @relation(fields: [locationId], references: [id])
  productMovements  ProductMovement[]
  productReturn     ProductReturn[]
  sales             Sale[]
}

model AdminOwner {
  id      String @id @default(uuid())
  adminId String
  ownerId String
  admin   Admin  @relation(fields: [adminId], references: [id])
  owner   Owner  @relation(fields: [ownerId], references: [id])

  @@unique([adminId, ownerId])
}

model Role {
  id              String           @id @default(uuid())
  roleName        String           @unique
  adminRoles      AdminRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id              String           @id @default(uuid())
  permissionName  String           @unique
  rolePermissions RolePermission[]
}

model AdminRole {
  id      String @id @default(uuid())
  adminId String
  roleId  String
  admin   Admin  @relation(fields: [adminId], references: [id])
  role    Role   @relation(fields: [roleId], references: [id])

  @@unique([adminId, roleId])
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Sale {
  id            String    @id @default(uuid())
  productId     String
  customerId    String?
  quantity      Int
  totalAmount   Float
  discount      Float?
  paymentMethod String?
  saleDate      DateTime  @default(now())
  product       Product   @relation(fields: [productId], references: [id])
  customer      Customer? @relation(fields: [customerId], references: [id])
}

model ProductMovement {
  id                    String   @id @default(uuid())
  productId             String
  sourceLocationId      String
  destinationLocationId String
  quantity              Int
  movementDate          DateTime @default(now())
  product             Product           @relation(fields: [productId], references: [id])
  sourceLocation      InventoryLocation @relation("SourceLocation", fields: [sourceLocationId], references: [id])
  destinationLocation InventoryLocation @relation("DestinationLocation", fields: [destinationLocationId], references: [id])
}

model ProductReturn {
  id                String            @id @default(uuid())
  productId         String
  customerId        String?
  locationId        String
  quantity          Int
  returnDate        DateTime          @default(now())
  reason            String
  product           Product           @relation(fields: [productId], references: [id])
  inventoryLocation InventoryLocation @relation("ProductReturnLocation", fields: [locationId], references: [id])
  customer          Customer?         @relation(fields: [customerId], references: [id])
}

model Customer {
  id          String          @id @default(uuid())
  firstName   String
  lastName    String
  email       String          @unique
  phoneNumber String?
  sales       Sale[]
  returns     ProductReturn[]
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
  performedBy String
  entityId    String
  entityType  String
  timestamp   DateTime @default(now())
}